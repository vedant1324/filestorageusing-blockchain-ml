#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node *next, *prev;
} *head=NULL;
void create(){
	int n,d;
	struct node *newnode;
	printf("Enter the length of Doubly linked list: ");
	scanf("%d", &n);
	int i;
	for(i=1; i<=n; i++){
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("Enter data: ");
		scanf("%d",&d);
		newnode->data = d;
		if(head==NULL){
			head= newnode;
			newnode->next =NULL;
			newnode->prev = NULL;
		}
		else{
			struct node *temp = head;
			while(temp->next != NULL){
				temp= temp->next;
				
			}
			temp->next= newnode;
			newnode->prev= temp;
			newnode->next= NULL;
		}
	}
	
	return;
}

void print(){
	struct node *temp= head;
	while(temp != NULL){
		printf("%d ", temp->data);
		temp= temp->next;
	}
	
	return;
}

void insertAtFront(){
	struct node *newnode;
	int d;
	newnode = (struct node*)malloc(sizeof(struct node));
	printf("Enter Data: ");
	scanf("%d", &d);
	newnode->data = d;
	if(head == NULL){
		head = newnode;
		newnode->next=NULL;
		newnode->prev = NULL;
	}
	else{
		
		newnode->next=head;
		head->prev= newnode;
		newnode->prev= NULL;
		head= newnode;
	}
	
	return;
}

void insertAtPos(){
 
 struct node *newnode;
	int d,pos;
	printf("Enter Position to enter node: ");
	scanf("%d", &pos);
	newnode = (struct node*)malloc(sizeof(struct node));
	printf("Enter Data: ");
	scanf("%d", &d);
	newnode->data = d;
	if(head == NULL){
		head = newnode;
		newnode->next=NULL;
		newnode->prev = NULL;
	}
	else{
	    struct node *temp= head;
		int i=1;
		while(i<pos-1){
		    temp=temp->next;
		    i++;
		}
		newnode->next=temp->next;
		temp->next->prev= newnode;
		newnode->prev= temp;
		temp->next = newnode;
		
	}
	
	return;	
	
}

void insertAtEnd(){
		struct node *newnode;
	int d;
	newnode = (struct node*)malloc(sizeof(struct node));
	printf("Enter Data: ");
	scanf("%d", &d);
	newnode->data = d;
	if(head == NULL){
		head = newnode;
		newnode->next=NULL;
		newnode->prev = NULL;
	}
	else{
		struct node *temp = head;
		while(temp->next != NULL){
		    temp = temp->next;
		}
		newnode->next=NULL;
		temp->next= newnode;
		newnode->prev= temp;
		
	}
	
	return;
}


void deleteAtFront(){
    if(head==NULL){
        printf("LL does not exist.\n");
        return;
    }
    else{
	struct node *temp=head;
	head->next->prev= NULL;
	head= head->next;
	free(temp);
	printf("Deleted successfully\n");
	
    }
    return;
}

void deleteAtPos(){
	int d,pos;
	printf("Enter Position to delete node: ");
	scanf("%d", &pos);
	if(head==NULL){
        printf("LL does not exist.\n");
        return;
    }
    else{
        struct node *temp = head;
        int i=1;
        while(i<pos){
            temp=temp->next;
            i++;
        }
        temp->prev->next = temp->next;
        temp->next->prev= temp->prev;
        free(temp);
        printf("deleted successfully\n");
        
    }
    return;
}

void deleteAtEnd(){
	struct node *temp=head;
	if(head==NULL){
        printf("LL does not exist.\n");
        return;
    }
    else{
	while(temp->next != NULL){
	    
	    temp=temp->next;
	}
	temp->prev->next=NULL;
	free(temp);
	printf("Deleted successfully!!\n");
	return;
    }
}


void search(){
    int key,i=0,flag=-1;
    printf("Enter the key to be searched: ");
    scanf("%d", &key);
    struct node *temp=head;
    while(temp->next !=NULL){
        i++;
        if(temp->data==key){
            
            flag=1;
            break;
        }
        temp=temp->next;
    }
    if(flag==1){
       printf("Element found at %d position\n", i); 
    }
    else{
        printf("Element not found\n");
    }
    return;
}

int main(){
	int n, k=1;
	printf("1.Create a Doubly Linked list. \n");
	printf("2.Insert at front\n");
	printf("3.Insert at Position\n");
	printf("4.Insert at End\n");
	printf("5.Delete at front\n");
	printf("6.Delete at Position\n");
	printf("7.Delete at End\n");
	printf("8.Print \n");
	printf("9.search an element\n");
	printf("10.Exit\n");
	while(k==1){
	printf("Enter your choice: ");
	scanf("%d", &n);
	
	switch(n) {
		case 1:
			{
			  create();
			  break;	
			}
			
		case 2:{
			   insertAtFront();
			break;
		}	
		
		case 3:{
			insertAtPos();
			break;
		}
		
		case 4:{
			insertAtEnd();
			break;
		}
		
		case 5:{
			deleteAtFront();
			break;
		}
		
		case 6:{
			deleteAtPos();
			break;
		}
		case 7:{
			deleteAtEnd();
			break;
		}
		case 8:{
			print();
			break;
		}
		case 9:{
		    search();
		    break;
		}
		case 10:{
			 k= 2;
			 
			break;
		}
		default:
			printf("Enter Valid input!!\n");
	}
	
}
return 0;}
